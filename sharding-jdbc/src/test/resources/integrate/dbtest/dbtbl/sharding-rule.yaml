shardingRule:
  tables:
    t_order:
      actualDataNodes: dbtbl_${0..9}.t_order_${0..9}
      databaseStrategy:
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: io.shardingsphere.dbtest.core.yaml.fixture.SingleAlgorithm
          rangeAlgorithmClassName: io.shardingsphere.core.fixture.RangeOrderShardingAlgorithm
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_${order_id % 10}
    t_order_item:
      actualDataNodes: dbtbl_${0..9}.t_order_item_${0..9}
      keyGeneratorColumnName: order_item_id
      keyGeneratorClassName: io.shardingsphere.dbtest.core.yaml.fixture.DecrementKeyGenerator
      databaseStrategy:
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: io.shardingsphere.dbtest.core.yaml.fixture.SingleAlgorithm
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_item_${order_id % 10}
  bindingTables:
    - t_order,t_order_item
  defaultDataSourceName: dbtbl_0
  defaultDatabaseStrategy:
    complex:
        shardingColumns: order_id, user_id
        algorithmClassName: io.shardingsphere.dbtest.core.yaml.fixture.MultiAlgorithm
  defaultTableStrategy:
    complex:
      shardingColumns: order_id
      algorithmClassName: io.shardingsphere.dbtest.core.yaml.fixture.MultiAlgorithm
  defaultKeyGeneratorClassName: io.shardingsphere.dbtest.core.yaml.fixture.IncrementKeyGenerator
